@page "/"
@using Newtonsoft.Json;
@using last.ConnectionData;
@inject NavigationManager NavManager

<html>
<head>
    <link href='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta/css/bootstrap.min.css' rel='stylesheet' type='text/css'>
    <link href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.5.0/css/font-awesome.min.css' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>
    <style>
        body {
            background: #222D32;
            font-family: 'Roboto', sans-serif;
        }

        .login-box {
            margin-top: 75px;
            height: auto;
            background: #1A2226;
            text-align: center;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
        }

        .login-key {
            height: 100px;
            font-size: 80px;
            line-height: 100px;
            background: -webkit-linear-gradient(#27EF9F, #0DB8DE);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .login-title {
            margin-top: 15px;
            text-align: center;
            font-size: 30px;
            letter-spacing: 2px;
            margin-top: 15px;
            font-weight: bold;
            color: #ECF0F5;
        }

        .login-form {
            margin-top: 25px;
            text-align: left;
        }

        input[type=text] {
            background-color: #1A2226;
            border: none;
            border-bottom: 2px solid #0DB8DE;
            border-top: 0px;
            border-radius: 0px;
            font-weight: bold;
            outline: 0;
            margin-bottom: 20px;
            padding-left: 0px;
            color: #ECF0F5;
        }

        input[type=password] {
            background-color: #1A2226;
            border: none;
            border-bottom: 2px solid #0DB8DE;
            border-top: 0px;
            border-radius: 0px;
            font-weight: bold;
            outline: 0;
            padding-left: 0px;
            margin-bottom: 20px;
            color: #ECF0F5;
        }

        .form-group {
            margin-bottom: 40px;
            outline: 0px;
        }

        .form-control:focus {
            border-color: inherit;
            -webkit-box-shadow: none;
            box-shadow: none;
            border-bottom: 2px solid #0DB8DE;
            outline: 0;
            background-color: #1A2226;
            color: #ECF0F5;
        }

        input:focus {
            outline: none;
            box-shadow: 0 0 0;
        }

        label {
            margin-bottom: 0px;
        }

        .form-control-label {
            font-size: 10px;
            color: #6C6C6C;
            font-weight: bold;
            letter-spacing: 1px;
        }

        .btn-outline-primary {
            border-color: #0DB8DE;
            color: #0DB8DE;
            border-radius: 0px;
            font-weight: bold;
            letter-spacing: 1px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
        }

            .btn-outline-primary:hover {
                background-color: #0DB8DE;
                right: 0px;
            }

        .login-btm {
            float: left;
        }

        .login-button {
            padding-right: 0px;
            text-align: right;
            margin-bottom: 25px;
        }

        .login-text {
            text-align: left;
            padding-left: 0px;
            color: #A2A4A4;
        }

        .loginbttm {
            padding: 0px;
        }
        
        p {
            color: #347deb;
        }
    </style>



</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-lg-3 col-md-2"></div>
            <div class="col-lg-6 col-md-8 login-box">
                <div class="col-lg-12 login-key">
                    <i class="fa fa-key" aria-hidden="true"></i>
                </div>
                <div class="col-lg-12 login-title">
                    Login here
                </div>

                <div class="col-lg-12 login-form">
                    <div class="col-lg-12 login-form">
                        <form>
                            <div class="form-group">
                                <label class="form-control-label">USERNAME</label>
                                <input type="text" class="form-control" @bind-value="@userNameInput">
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">PASSWORD</label>
                                <input type="password" class="form-control" @bind-value="@passwordInput">
                            </div>
                           

                            <div class="col-lg-12 loginbttm">
                                <div class="col-lg-6 login-btm login-text">
                                </div>
                            <!-- Error Message -->
                                <div class="col-lg-6 login-btm login-button">
                                    
                                    <button type="submit" class="btn btn-outline-primary" @onclick="@loginFunction">LOGIN</button>
                                </div>
                                <p>
                                    <input type="checkbox" checked="checked"> Remember me<br />

                                    Forgot <a href="#"> password? </a>
                                </p>
                            </div>
                            
                        </form>
                    </div>
                </div>
                <div class="col-lg-3 col-md-2"></div>
            </div>
        </div>
    </div>
</body>
</html>

@code {
    string userNameInput = "";
    string passwordInput = "";

    async void loginFunction()
    {
        //Login funtion

        if (userNameInput == "" || passwordInput == "")
        {
            //Pop up alert window
            await App.Current.MainPage.DisplayAlert("Alert", "Enter username/password", "OK");
        }
        else
        {
            //Call api and stuff

            var loginData = new List<LoginModelClass>();
            loginData = await getLoginData();
            if (loginData != null)
            {
                //if return response is not null
                bool present = true;

                foreach (var temp in loginData)
                {
                    if (userNameInput == temp.userName && passwordInput == temp.password)
                    {
                        await App.Current.MainPage.DisplayAlert("Alert", "Welcome " + userNameInput, "OK");
                        NavManager.NavigateTo("/counter");
                        present = true;
                        break;
                    }
                    else
                    {

                        //logic for continuos checking if not match
                        present = false;
                    }
                }

                if (present == false)
                {
                    await App.Current.MainPage.DisplayAlert("Alert", "Incorrect Username/Password" + userNameInput, "OK");
                }
            }
            else
            {
                await App.Current.MainPage.DisplayAlert("Alert", "Network Error | Code : 2" + userNameInput, "OK");
            }
        }
    }

    private async Task<List<LoginModelClass>> getLoginData()
    {
        string _baseUrl = ClsConnections.url;
        var returnRespone = new List<LoginModelClass>();
        try
        {
            using (var httpClient = new HttpClient())
            {
                string url = $"{_baseUrl}/local/logindetails";
                var apiResponse = await httpClient.GetAsync(url);
                if (apiResponse.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    var response = await apiResponse.Content.ReadAsStringAsync();
                    returnRespone =
                        JsonConvert.DeserializeObject<List<LoginModelClass>>(response.ToString());
                }
                else
                {
                    await App.Current.MainPage.DisplayAlert("Alert", "network Error | Code : 1", "OK");
                }
            }
        }
        catch (Exception ex)
        {
            await App.Current.MainPage.DisplayAlert("Alert", ex.Message + " | Code : 1A", "OK");
        }
        return returnRespone;
    }

    class LoginModelClass
    {
        public string id { get; set; }
        public string userName { get; set; }
        public string password { get; set; }
    }
}