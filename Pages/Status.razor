@page "/status"
@using Newtonsoft.Json;
@using last.ConnectionData;
@using System.Text;
@inject NavigationManager NavManager

<head>
    <title>status</title>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <style>
        .banner {
            position: relative;
            height: 60px;
            background-color:#19b8fc;
            background-size: cover;
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

            .banner::after {
                content: "";
                background-color: rgba(0, 0, 0, 0.3);
                position: absolute;
                width: 100%;
                height: 100%;
            }

        .btn-block {
            margin-top: 50px;
            text-align: center;
        }

        button {
            width: 150px;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background: #669999;
            font-size: 16px;
            color: #fff;
            cursor: pointer;
        }

            button:hover {
                background: #a3c2c2;
            }
        /*toggle*/
        .switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

            /* Hide default HTML checkbox */
            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

        /* The slider */
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            -webkit-transition: .4s;
            transition: .4s;
        }

            .slider:before {
                position: absolute;
                content: "";
                height: 16px;
                width: 16px;
                left: 4px;
                bottom: 4px;
                background-color: white;
                -webkit-transition: .4s;
                transition: .4s;
            }

        input:checked + .slider {
            background-color: #2196F3;
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #2196F3;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }

        /* Rounded sliders */
        .slider.round {
            border-radius: 34px;
        }

            .slider.round:before {
                border-radius: 50%;
            }
    </style>

</head>
<body>
    <div class="container">
        <div class="banner">
            <h1><b>Status</b></h1>
        </div>
    </div>
    <br />
    <br />
    <br />
    <form>
        <div class="form-group">
            <label for="Input">Full name</label>
            <input type="text" class="form-control" id="name" placeholder="Enter your name" @bind-value="@userNameStatus">
        </div>
        <div class="form-group">
            <label for="Description">Description</label>
            <textarea class="form-control" id="Description" rows="3" @bind="@descriptionStatus"></textarea>
        </div>
        <div class="form-group ">
            <label for="Select1">Select Type</label>
            <select class="form-control" id="type1" @bind="@selectedType">
                <option>Success</option>
                <option>Warm</option>
                <option>Error</option>
            </select>
        </div>
        <br />
        <br />
        <div>
            <div style="flex-direction:row">
                <p>
                    <b>Field 1</b>
                    <label class="switch">
                        <input type="checkbox" @onclick="ToggleMenu">
                    <span class="slider round"></span>
                    </label>
                    <div class="@inputMenuCssClass"><input type="text" class="form-control" id="name" placeholder="Enter value" @bind-value="@optionalItem1"></div>
                </p>
            </div>
            
            <div style="flex-direction:row">
                    <p>
                        <b>Field 2</b>
                        <label class="switch">
                            <input type="checkbox" @onclick="ToggleMenu2">
                            <span class="slider round"></span>
                        </label>
                    <div class="@inputMenuCssClass2"><input type="text" class="form-control" id="name" placeholder="Enter value" @bind="@optionalItem2"></div>
                    </p>
                </div>

            <div style="flex-direction:row">
                <p>
                    <b>Field 3</b>
                    <label class="switch">
                        <input type="checkbox" @onclick="ToggleMenu3">
                        <span class="slider round"></span>
                    </label>
                    <div class="@inputMenuCssClass3"><input type="text" class="form-control" id="name" placeholder="Enter value" @bind-value="@optionalItem3"></div>
                </p>
            </div>
            
        </div>
        <div class="btn-block">
            <button type="submit" @onclick="@statusFunction">Submit</button>
        </div>

        

    </form>


</body>

@code {
    string userNameStatus = "";
    string descriptionStatus = "";
    string selectedType = "SUCCESS";
    //aditional items

    int item1 = 0;
    string optionalItem1 = "";
    int item2 = 0;
    string optionalItem2 = "";
    int item3 = 0;
    string optionalItem3 = "";

    private bool collapseInputMenu = true;

    private string inputMenuCssClass => collapseInputMenu ? "collapse" : null;

    private void ToggleMenu()
    {
        collapseInputMenu = !collapseInputMenu;
        if (collapseInputMenu)
        {
            item1 = 1;
        }else
        {
            item1 = 0;
        }
    }
    //field 2//
    private bool collapseInputMenu2 = true;

    private string inputMenuCssClass2 => collapseInputMenu2 ? "collapse" : null;

    private void ToggleMenu2()
    {
        collapseInputMenu2 = !collapseInputMenu2;
        if (collapseInputMenu)
        {
            item2 = 1;
        }
        else
        {
            item2 = 0;
        }
    }
    //field 3//
    private bool collapseInputMenu3 = true;

    private string inputMenuCssClass3 => collapseInputMenu3 ? "collapse" : null;

    private void ToggleMenu3()
    {
        collapseInputMenu3 = !collapseInputMenu3;
        if (collapseInputMenu)
        {
            item3 = 1;
        }
        else
        {
            item3 = 0;
        }
    }

    async void statusFunction()
    {
        //Login funtion

        if (userNameStatus == "" || descriptionStatus == "")
        {
            //Pop up alert window
            await App.Current.MainPage.DisplayAlert("Alert", "Enter username/description", "OK");
        }
        else
        {
            //Call api and stuff

            var PostDataStatus = new StatusModelClass
                {
                    id = 0,
                    name = userNameStatus,
                    description = descriptionStatus,

                    field1 = 0,
                    field1value = "",
                    field2 = 0,
                    field2value = "",
                    field3 = 0,
                    field3value = "",
                    type = selectedType,
                    createdAt = DateTime.Now,
                    updatedAt = DateTime.Now
                };

            var responseOfPost = await postDataFun(PostDataStatus);

            this.StateHasChanged();

            //              THIS IS FOR WHEN RESPONSE IS DESERIALIZED
            //if (response.message == "Login Successfully")
            //{
            //    //ALERT FOR SUCCESFUL LOGIN
            //    await App.Current.MainPage.DisplayAlert("Message", "REGISTERED SUCCESFULLY" + response.message, "OK");
            //}
            //else
            //{
            //    //ALERT FOR UNSUCCESFUL LOGIN
            //    await App.Current.MainPage.DisplayAlert("Message", response.message, "OK");
            //}

            if (responseOfPost != null)
            {
                //if return response is not null
                await App.Current.MainPage.DisplayAlert("Message", responseOfPost.message, "OK");

            }
            else
            {
                await App.Current.MainPage.DisplayAlert("Alert", "Network Error | Code : 1A-STS" + userNameStatus, "OK");
            }
        }
    }

    async Task<PostResponse> postDataFun(StatusModelClass statusModelClass)
    {
        //postData

        string _baseUrl = ClsConnections.url;

        var returnRespone = new PostResponse();

        try
        {
            using (var httpClient = new HttpClient())
            {
                string responseString = "";

                string url = $"{_baseUrl}/local/status";

                //added

                HttpResponseMessage response = new();
                response.EnsureSuccessStatusCode();
                HttpRequestMessage request = new HttpRequestMessage();

                string strJSON1 = JsonConvert.SerializeObject(statusModelClass);
                HttpMethod method = new HttpMethod("POST");

                if (strJSON1.Length > 0)
                {
                    string ostr = strJSON1.Remove(strJSON1.Length - 1, 1);
                    ostr = ostr.Remove(0, 1);
                    strJSON1 = ostr;
                    strJSON1 = strJSON1.Replace("jsonurlcatagory", "jsonurl");

                    strJSON1 = "[{" + strJSON1 + "}]";

                    var content = new StringContent(strJSON1, Encoding.UTF8, "application/json");
                    var response2 = await httpClient.PostAsync(url, content); //client.PostAsync


                    if (response.StatusCode == System.Net.HttpStatusCode.OK)
                    {
                        responseString = await response2.Content.ReadAsStringAsync();

                        returnRespone.message = responseString;
                        //JsonConvert.DeserializeObject<PostResponse>(responseString.ToString());
                        //returnRespone.message = siamese[0];
                        //JsonConvert.DeserializeObject<List<PostResponse>>(responseString.ToString());


                    }
                    else
                    {

                        var ReturnString = "ERROR on fetching report requests. upload failed; " + Environment.NewLine + " response StatusCode is : " + response2.StatusCode.ToString() + Environment.NewLine;
                        returnRespone.message = ReturnString;

                    }
                }
                return returnRespone;


            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }
        return returnRespone;
    }




    class PostResponse
    {
        public string message { get; set; }
    }


    class StatusModelClass
    {
        public int id { get; set; }
        public string? name { get; set; }
        public string? description { get; set; }

        public int? field1 { get; set; }
        public string? field1value { get; set; }
        public int? field2 { get; set; }
        public string? field2value { get; set; }
        public int? field3 { get; set; }
        public string? field3value { get; set; }

        public string? type { get; set; }
        public DateTime? createdAt { get; set; }
        public DateTime? updatedAt { get; set; }
    }
}


  